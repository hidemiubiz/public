//-----------------------------------------------// Dummy SRC Code Class//-----------------------------------------------class Queue {    constructor(){	this.__a = new Array();	this.__b = new Array();    }    enqueue(o){	this.__a.push(o);	this.__b[this.__b.length] = o;    }    dequeue (){	if(this.__a.length > 0){	    return this.__a.shift();	}	return null;    }    getCopy(){	var q = new Queue();	for(var i=0; i<this.__b.length; i++){	    q.enqueue(this.__b[i].cloneNode(true));	}	return q;    }}//-----------------------------------------------// Score informaton class.//-----------------------------------------------class ScoreInfo {    constructor(minScore,name,image){	this.minScore=minScore;	this.name=name;	this.image=image;    }}//-----------------------------------------------// Score informaton class.//-----------------------------------------------class Setting {    load_default(){	this.flush_if_missed=false;	this.keep_focus_on_input=true;	this.upload_highscore=true;	this.question_font_size=20;	this.indicator_font_size=18;	this.score_disp_mode=1;	this.dummy_src_code=DUMMYCODE_01;    }    cnstructor(){	this.load_defult();    }    load_from_storage(){	this.flush_if_missed = string_to_boolean(load_data("hmtyper.flush_if_missed"), false);	this.keep_focus_on_input = string_to_boolean(load_data("hmtyper.keep_focus_on_input"), true);	this.upload_highscore = string_to_boolean(load_data("hmtyper.upload_highscore"), true);	this.question_font_size  = nvl(load_data("hmtyper.question_font_size"),20);	this.indicator_font_size  = nvl(load_data("hmtyper.indicator_font_size"),18);	this.score_disp_mode = nvl(load_data("hmtyper.score_disp_mode"),1);	this.dummy_src_code = nvl(load_data("hmtyper.dummy_src_code"), DUMMYCODE_01);    }    save_to_storage(){	save_data("hmtyper.flush_if_missed", boolean_to_string(this.flush_if_missed));	save_data("hmtyper.keep_focus_on_input", boolean_to_string(this.keep_focus_on_input));	save_data("hmtyper.upload_highscore", boolean_to_string(this.upload_highscore));	save_data("hmtyper.question_font_size", this.question_font_size);	save_data("hmtyper.indicator_font_size", this.indicator_font_size);	save_data("hmtyper.score_disp_mode", this.score_disp_mode);	save_data("hmtyper.dummy_src_code", this.dummy_src_code);    }    reflect_to_ui(){	console.log("reflect_to_ui " + this.flush_if_missed);	if(this.flush_if_missed){ console.log("fm = true");}	else { console.log("fm = false");}	document.getElementById("flush_if_missed").checked = this.flush_if_missed;	document.getElementById("keep_focus_on_input").checked = this.keep_focus_on_input;	document.getElementById("upload_highscore").checked = this.upload_highscore;	document.getElementById("question_font_size").value = this.question_font_size;	document.getElementById("indicator_font_size").value = this.indicator_font_size;	document.getElementById("question").style.fontSize  = this.question_font_size + "px";	document.getElementById("input").style.fontSize  =  this.question_font_size + "px";	document.getElementById("timer").style.fontSize  =  this.indicator_font_size + "px";	document.getElementById("score").style.fontSize  =  this.indicator_font_size + "px";	document.getElementById("indicator").style.fontSize  =  this.indicator_font_size + "px";	document.getElementById("dummy_src_code").value  =  this.dummy_src_code;    }    load_from_ui(){	this.flush_if_missed = document.getElementById("flush_if_missed").checked;	this.keep_focus_on_input = document.getElementById("keep_focus_on_input").checked;	this.upload_highscore = document.getElementById("upload_highscore").checked;	this.question_font_size = document.getElementById("question_font_size").value;	this.indicator_font_size = document.getElementById("indicator_font_size").value;	this.dummy_src_code = document.getElementById("dummy_src_code").value;    }}//-----------------------------------------------// User informaton class.//-----------------------------------------------class UserInfo {    constructor(){	this.uuid = "";	this.name = "";	this.highscore = 0;	this.highscore_date = "";	this.country = "";    }    load_from_storage(){	this.uuid = load_data("hmtyper.uuid");	if(this.uuid != ""){	    this.name      = nvl(load_data("hmtyper.name"),"");	    this.country   = load_data("hmtyper.country");	    this.highscore = Number(nvl(load_data("hmtyper.highscore"),0));	    this.highscore_date = load_data("hmtyper.highscore_date");	}	else {	    this.uuid = createUuid();	}	console.log("userInfo.load_from_storage(" + this.uuid + "," + this.name + "," + this.country + "," + this.highscore + ")");    }    save_to_storage(){	console.log("UserInfo.save_to_stoar(" + this.uuid + "," + this.name + "," + this.country + "," + this.highscore + ")");	save_data("hmtyper.uuid", this.uuid);	save_data("hmtyper.name", this.name);	save_data("hmtyper.country", this.country);	save_data("hmtyper.highscore", this.highscore);	save_data("hmtyper.highscore_date", this.highscore_date);    }    clear_from_storage(){	this.name = "";	this.highscore = 0;	this.highscore_date = "";	this.country = "";	localStorage.removeItem("hmtyper.name");	localStorage.removeItem("hmtyper.country");	localStorage.removeItem("hmtyper.highscore");	localStorage.removeItem("hmtyper.highscore_date");    }    load_from_ui(){	this.name = document.getElementById("name").value;	this.highscore = document.getElementById("highscore_text").value;	this.country = document.getElementById("select_country").value;    }    reflect_to_ui(){	document.getElementById("name").value = this.name;	document.getElementById("name_label").value = this.name;	document.getElementById("highscore_text").value = this.highscore ;	document.getElementById("select_country").selectedIndex = get_country_index_by_value(this.country);	document.getElementById("rank_text").value =  this.highscore + "  " + getClassInfo(this.highscore).name;	document.getElementById("rank_insignia").src = getClassInfo(this.highscore).image;	console.log(document.getElementById("rank_text").value);	for(var i=0; i<SCORE_INFO.length; i++){	    var tag_id = "pos_" + SCORE_INFO[i].minScore;	    document.getElementById(tag_id).value = "";	}	for(var i=0; i<SCORE_INFO.length; i++){	    var tag_id = "pos_" + SCORE_INFO[i].minScore;	    if(this.highscore >= SCORE_INFO[i].minScore){		document.getElementById(tag_id).value = "  <<<< You are here.";		break;	    }	}    }    get_chk_digit(){	return this.uuid+this.name+get_country_code_by_value(this.country)+this.highscore+"hmvsctyper";    }}//var SERVER_BASE="http://localhost";//var SERVER_BASE="https://hidemiu.sakura.ne.jp";var SERVER_BASE="";var SCORE_INFO = create_score_info();var nGameCount=0;var USERINFO = new UserInfo();var SETTING = new Setting();var ORIGINAL_QUEUE;var QUEUE;var isGameStart=0;var startTime=0;var timerId_Main=0;var timerId_VSCode=0;var nScore=0;var nMaxTime=60;var nCountDown;var nFlushId=0;var lastInputted=""; var VSCODE_PROGRESS=0;//------------------------------------// create score and rank info.//------------------------------------function create_score_info(){    var sinfo= new Array();    var sidx=0;     sinfo[sidx] = new ScoreInfo(601,"Fleet Admiral","FleetAdmiral_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(551,"Admiral","Admiral_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(501,"Vice Admiral","ViceAdmiral_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(451,"Read Admiral Upper Half","RearAdmiralUH_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(401,"Rear Admiral Lower Half","RearAdmiralLH_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(351,"Captain","Captain_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(301,"Commander","Commander_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(271,"Lieutnant Commander","LieutenantCommander_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(221,"Lieutenant","Lieutenant_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(201,"Lieutenan Junior Grade","LieutenantJunior_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(151,"Ensign","Ensign_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(101,"Sergeant","Sergent_l.png");  sidx++;    sinfo[sidx] = new ScoreInfo(0,"Private","Private_l.png");  sidx++;    return sinfo;}//------------------------------------// body load. //------------------------------------async function init(){    try {	prepare_country_select();	document.getElementById("base").addEventListener('keypress', keyPress);		USERINFO.load_from_storage();	USERINFO.reflect_to_ui();	SETTING.load_from_storage();	SETTING.reflect_to_ui();		resize();	prepare_game_start();	prepareDummyVS();	const xhr2 = await get_highscore_com(SETTING.score_disp_mode);	document.getElementById("vs_left").innerHTML = xhr2.responseText;    }    catch(e){	DEBUG_LOG(e.message);    }}//------------------------------------// Get code from country index and code string("1 ABW")//------------------------------------function get_country_index_by_value(cvalue){    var n_country = 0;    if(cvalue != null){        var tmp = cvalue.split(' ');        n_country = parseInt(tmp[0]);    }    return n_country;}//------------------------------------// Get index from country index and code string("1 ABW")//------------------------------------function get_country_code_by_value(cvalue){    if(cvalue != null){	var tmp = cvalue.split(' ');	country = tmp[1];	return country;    }    else {	return " "    }}//------------------------------------// Get class informaton from score.//------------------------------------function getClassInfo(score){    console.log("getClassInfo(" + score + ")   len=" + SCORE_INFO.length);    for(var i=0; i<SCORE_INFO.length; i++){	if(score >= SCORE_INFO[i].minScore){	    return SCORE_INFO[i];	}    }    return SCORE_INFO[SCORE_INFO.length-1]}//------------------------------------// resize//------------------------------------function resize(){    var w = document.body.scrollWidth;    var h = document.body.clientHeight;    var aw =document.body.scrollWidth;    var aw_right = document.body.scrollWidth - 320;    if(document.body.clientWidth  > 1000){	aw       = document.body.clientWidth;	aw_right = document.body.clientWidth - 320;    }        document.getElementById("menu_table").style.width =  aw + "px";;    document.getElementById("main_table").style.width =  aw + "px";;        var eh = h*0.5;    if(h < 800){	eh = h*0.3;    }    document.getElementById("vs_edit").style.height= eh  + "px";;    var adjust=110;    var ehl = h - eh - adjust;    document.getElementById("information").style.height= ehl + "px";    document.getElementById("vs_edit").style.widrth = aw_right + "px";        var ehl = h - eh - adjust - 40;    document.getElementById("information_tab1").style.height= ehl + "px";    document.getElementById("information_tab1").style.width = aw_right + "px";    document.getElementById("information_tab2").style.height= ehl + "px";    document.getElementById("information_tab2").style.width = aw_right + "px";    document.getElementById("information_tab3").style.height= ehl + "px";    document.getElementById("information_tab3").style.width = aw_right + "px";    document.getElementById("information_tab4").style.height= ehl + "px";    document.getElementById("information_tab4").style.width = aw_right + "px";    document.getElementById("vs_left").style.height = h-100 + "px";    document.getElementById("statusbar").style.width= aw + "px";}//------------------------------------// Prepare for a new game.//------------------------------------function prepare_game_start(){    document.getElementById("timer").value  = getFormatString(0);    document.getElementById("score").value  = getFormatString(0);    document.getElementById("question").value= "Push START Button or Retun Key to start a game.";    document.getElementById("input").value  = "";    document.getElementById("timer").value = getFormatString(nMaxTime);    document.getElementById("score").value = getFormatString(nScore);}//------------------------------------// Timer process on the game.//------------------------------------function mainLoop(){     if(SETTING.keep_focus_on_input == true){	document.getElementById("input").focus();    }    var nowTime = new Date();    nowTime = Math.floor((nowTime - startTime)/1000);    var remainTime = nMaxTime - nowTime;    document.getElementById("timer").value = getFormatString(remainTime);    if(nowTime >= nMaxTime){	stopGame();    }    else {	isGameStart=1;    }}//------------------------------------// Get date string.//------------------------------------function getCurrentDateString(){    var d= new Date();    var buff = d.getUTCFullYear() + "-" + (d.getUTCMonth()+1).toString().padStart(2,'0') + "-" + d.getUTCDate().toString().padStart(2,'0') + " " + d.getUTCHours().toString().padStart(2,'0') + ":"  + d.getUTCMinutes().toString().padStart(2,'0') + ":"  + d.getUTCSeconds().toString().padStart(2,'0');    console.log(buff);    return buff;}//------------------------------------// Stop a game.//------------------------------------function stopGame(){    document.getElementById("question").value= "GAME OVER.  ";    isGameStart=0;    if(timerId_Main != 0){	clearInterval(timerId_Main);	clearInterval(timerId_VSCode);	timerId_Main = 0;	timerId_VSCode = 0;    }    console.log("stopGame()  nScore=" + nScore + "  highScore=" + USERINFO.highscore);        if(nScore > USERINFO.highscore){	USERINFO.highscore_date = getCurrentDateString();	USERINFO.highscore = nScore;	document.getElementById("input").value = "High Score!!";	USERINFO.save_to_storage();	USERINFO.reflect_to_ui();	if(SETTING.upload_highscore == true){	    upload_score(0);	}    }    else {	document.getElementById("input").value = "";    }    var className = getClassInfo(nScore).name;     var strClass = " You are " + isStartWithA(className) + " " + className + ".";    document.getElementById("question").value += strClass;    document.getElementById("input").value = "Push START Button or Retun Key to start a game."    lastInputted = document.getElementById("input").value;}//------------------------------------// Check if the word starts with "a"//------------------------------------function isStartWithA(word){    var c = word.toLowerCase();    if(c.startsWith("a")){	return "an";    }    else {	return "a";    }}//------------------------------------// Set a new questions.//------------------------------------function setQuestion(){    document.getElementById("input").value= "";    document.getElementById("question").value= "";    lastInputted="";         for(var i=0; i<5; i++){	var qIndex = Math.floor(Math.random()*strWordList.length);	document.getElementById("question").value += strWordList[qIndex];	if(i<4)    document.getElementById("question").value += " ";    }}//------------------------------------// Start count down.//------------------------------------function countDownStart(){    document.getElementById("timer").value= getFormatString(nMaxTime);    document.getElementById("score").value = getFormatString(0);    if(timerId_Main != 0){	return;    }    if(nCountDown==0){	clearInterval(timerId_Main);	timerId_Main = 0;    }    timerId_Main = setInterval("countDown();",1000);    nCountDown=3;    document.getElementById("timer").value= getFormatString(nMaxTime);    document.getElementById("score").value = getFormatString(0);    document.getElementById("question").value = nCountDown;    document.getElementById("input").value    = "";    document.getElementById("input").focus();    lastInputted="";     if(nGameCount > 10){	clearDummyVSArea();    }    nGameCount++;}//------------------------------------// Countdown.//------------------------------------function countDown(){  nCountDown--;  document.getElementById("question").value = nCountDown;  if(nCountDown==0){    clearInterval(timerId_Main);    timerId_Main = 0;    gameStart();  }}//------------------------------------// Statrt a game.//------------------------------------function gameStart(){    if(timerId_Main != 0){	clearInterval(timerId_Main);	timerId_Main = 0;    }    document.getElementById("input").focus();    prepare_game_start();    isGameStart=1;    startTime = new Date();    nScore=0;    timerId_Main = setInterval("mainLoop();", 10);    timerId_VSCode = setInterval("vsCodeEditorLoop();", 10);    lastInputted="";     setQuestion();}//------------------------------------// Get formatted string.//------------------------------------function getFormatString(value){  var strValue;  if(value == "")  return("0");  if(value < 0)       { strValue = "-"+(value*-1).toString(); }  else if(value <  10){ strValue = ""+value.toString(); }  else if(value < 100){ strValue =  ""+value.toString(); }  else                {strValue  =  "" +value.toString(); }  return strValue;}//------------------------------------// Get formatted string.//------------------------------------function getFormatString2(value){  var strValue;  if(value == "")  return("000");  if(value < 0)       { strValue = "-00"+(value*-1).toString(); }  else if(value <  10){ strValue = " 00"+value.toString(); }  else if(value < 100){ strValue =  " 0"+value.toString(); }  else                {strValue  =  " " +value.toString(); }  return strValue;}//------------------------------------// Generate a UUID//------------------------------------function createUuid(){  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(a) {      let r = (new Date().getTime() + Math.random() * 16)%16 | 0, v = a == 'x' ? r : (r & 0x3 | 0x8);      return v.toString(16);   });}//------------------------------------// Remove from  localStoarge//------------------------------------function clear_data(){    if(window.confirm("Are you sure you want to delete your data?")){	USERINFO.clear_from_storage();	USERINFO.reflect_to_ui();	upload_score(1);    }}//------------------------------------// Get from localStoarge//------------------------------------function load_data(key){    var v = localStorage.getItem(key);    if(v == null) return "";    else return v;}//------------------------------------// Set to localStoarge//------------------------------------function save_data(key,value){    return localStorage.setItem(key, value);}//------------------------------------// Prepare country selection UI.//------------------------------------function prepare_country_select(){    var s = document.getElementById("select_country");    while(s.lastElementChild){	s.removeChild(s.LastElementChild);    }    for(var i=0; i<COUNTRY_CODE.length; i++){        var e = document.createElement('option');        e.value = COUNTRY_CODE[i];        e.textContent = trim_too_long_string(COUNTRY_EN_CONTENT[i], 40);        s.appendChild(e);    }}//------------------------------------// trim long string.//------------------------------------function trim_too_long_string(src, len){    var org_len = src.length;    var dst="";    if(org_len > len){        dst = src.substring(0, len);        dst += "...";    }    else {        dst = src;    }    return dst;}//------------------------------------// Save user information and get high score.//------------------------------------function save_and_upload(){    try {	DEBUG_LOG("save_and_upload");	USERINFO.load_from_ui();	USERINFO.save_to_storage();	USERINFO.reflect_to_ui();	upload_score(0);    }    catch(e){	DEBUG_LOG(e.message);    }}//------------------------------------// Prevent Backspace.//------------------------------------function preventBackspace(e) {    var evt = e || window.event;    if(isGameStart==0){        if (evt.preventDefault) {            evt.preventDefault();        } else {            evt.returnValue = false;        }    }    if (evt) {        var keyCode = evt.charCode || evt.keyCode;        if (keyCode === 8) {            if (evt.preventDefault) {                evt.preventDefault();            } else {                evt.returnValue = false;            }        }    }}//------------------------------------// Upload high score. //------------------------------------async function upload_score(mode){    try {	DEBUG_LOG("start upload_my_score()");	const xhr1 = await upload_my_score(mode);	DEBUG_LOG("start get_highscore()");	const xhr2 = await get_highscore_defmode();	document.getElementById("vs_left").innerHTML = xhr2.responseText;    }    catch (e){	DEBUG_LOG(e.message);    }}//------------------------------------// Upload high score. //------------------------------------async function upload_my_score(mode){    var country = get_country_code_by_value(USERINFO.country);    var chk = await sha256(USERINFO.get_chk_digit()); // I guess it's too easy to break.....    var q = "mode=" + mode + "&uuid=" + encodeURI(USERINFO.uuid) + "&name=" + encodeURI(USERINFO.name) + "&country=" + encodeURI(country) + "&highscore=" + encodeURI(USERINFO.highscore) + "&highscore_date=" + encodeURI(USERINFO.highscore_date) + "&chk=" + encodeURI(chk);    var SERVER_URL = SERVER_BASE + "/cgi-bin/typer/set_highscore.cgi?" + q;        const p = new Promise((resolve, reject)=> {	const xhr = new XMLHttpRequest();	xhr.open("GET", SERVER_URL);	xhr.addEventListener('load',(e)=> resolve(xhr));	xhr.send();    });    return p;}//------------------------------------// Get high score and display. //------------------------------------function get_highscore_defmode(){    return get_highscore_com(SETTING.score_disp_mode);}//------------------------------------// Get high score and display. //------------------------------------async function get_highscore(mode){    try {	DEBUG_LOG("get_highscore()");	const xhr2 = await get_highscore_com(mode);	document.getElementById("vs_left").innerHTML = xhr2.responseText;    }    catch(e){	DEBUG_LOG(e.message);    }}//------------------------------------// Get high score and display. //------------------------------------async function get_highscore_com(mode){    SETTING.score_disp_mode=mode;    save_data("hmtyper.score_disp_mode", SETTING.score_disp_mode);    console.log("GET_HIGHSCORE()");    var url="";        var SERVER_URL=SERVER_BASE+"/cgi-bin/typer/get_highscore.cgi?uuid=" + USERINFO.uuid + "&mode=" + mode;    const p = new Promise((resolve, reject)=> {	const xhr = new XMLHttpRequest();	xhr.open("GET", SERVER_URL);	xhr.addEventListener('load',(e)=> resolve(xhr));	xhr.send();    });    return p;}//----------------------------------// keyPress event//----------------------------------function keyPress(e){    //console.log("KEYPRESS");    if(e.keyCode == 13){	if(isGameStart==0){	    countDownStart();	}    }}//----------------------------------// keydown event//----------------------------------function key_down(e){    var evt = e || window.event;    if(isGameStart==0){	document.getElementById("input").value=lastInputted;	if(evt.keyCode == 13){	    if(isGameStart==0){		countDownStart();	    }	}	return;    }    var a = document.getElementById("input").value;    a = a.toLowerCase();    var c = document.getElementById("question").value;    var l = a.length;    var pc = c.substr(0,l);	    VSCODE_PROGRESS+=1;    if(pc==a){	lastInputted=a;	nScore++;	if(a == c){	    setQuestion();	    lastInputted="";	}	VSCODE_PROGRESS+=3;    }    else {	document.getElementById("input").value=lastInputted;	nScore--;	if(nScore < 0) nScore=0;	if(SETTING.flush_if_missed){	    flushWindow();	}    }    document.getElementById("score").value = getFormatString(nScore);}//----------------------------------------------// Prepare dummy src code.//----------------------------------------------function prepareDummyVS(){    ORIGINAL_QUEUE = new Queue();    var codeLine = SETTING.dummy_src_code.split(/\n/);    for(var i=0; i<codeLine.length; i++){	prepareDummyCodeLine(i+1, codeLine[i]);    }    QUEUE = ORIGINAL_QUEUE.getCopy();}//----------------------------------------------// Get formatted line number.//----------------------------------------------function formattedLineNum(l){    var s = String(l);    var buff="";    for(var i=5-(s.length); i>0; i--){	buff += " ";    }    buff += s;    buff += "  ";    return buff;}//----------------------------------------------// Create colored src code and add to a queue.//----------------------------------------------function prepareDummyCodeLine(lineNum, txt){    var colIndex=0;    var colorList = ["pink","lightskyblue","lemonchiffon","aliceblue","aquamarine","lightsalmon"];    addDummyToken("span", formattedLineNum(lineNum), "gray", "right");        var list = txt.split(/(\s|,|\(|\)|=|\")/g);        if(list[0].startsWith(" ")){	colIndex++;    }    var nowColor="white";    var isComment=0;    var isReteral=0;    for(var i=0; i<list.length; i++){	if(list[i].includes("//")){	    isComment = 1;	}	if(list[i] == "\""){	    if(isReteral==0) isReteral=1;	    else             isReteral=0;	}		if(list[i] == "(" || list[i] == ")" || list[i] == " " || list[i] == "=" || list[i] == "{" || list[i] == "}"){	    nowColor = "yellow";	}	else if(list[i] == ")"){	    nowColor = "white";	}	else {	    nowColor = colorList[colIndex];	    colIndex++;	}	if(isComment == 1){	    nowColor = "darkseagreen";	}	if(isReteral == 1){	    nowColor = "darkseagreen";	}	addDummyToken("span", list[i] , nowColor, null);	    	if(colIndex >= colorList.length){	    colIndex =0;	}    }    var c = document.createElement("br");    ORIGINAL_QUEUE.enqueue(c);}//----------------------------------------------// Add dummy src code token to a queue.//----------------------------------------------function addDummyToken(tag, txt, color, left_right){    var cc = txt.split('');    for(var i=0; i<cc.length; i++){	var c = document.createElement(tag);	c.style.color = color;	if(left_right != null){	    c.style.textAlign = left_right;	}	var v=cc[i];	v = v.replaceAll(" ","&nbsp;");	v = v.replaceAll("\t","&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");	c.innerHTML = v;	ORIGINAL_QUEUE.enqueue(c);    }}//------------------------------------// Flush window if missed.//------------------------------------function flushWindow(){    var obj = document.getElementById("information_tab1");    obj.style.backgroundColor="#888888";    nFlushId = setTimeout("normalizeWindow();",50);}//------------------------------------// Normalize flushed window.//------------------------------------function normalizeWindow(){    var obj = document.getElementById("information_tab1");    obj.style.backgroundColor="#1e1e1e";    clearTimeout(nFlushId);}//------------------------------------// Cleare the VSC like editor.//------------------------------------function clearDummyVSArea(){    var p = document.getElementById("vs_edit");    var x = p.lastElementChild;    while(x != null){	p.removeChild(x);	x = p.lastElementChild;    }}//----------------------------------------------// Process the VSC like editor.//----------------------------------------------function vsCodeEditorLoop(){    if(VSCODE_PROGRESS <= 0) return;    try {	for(var i=0; i<3; i++){	    var p = document.getElementById("vs_edit");	    var x = p.lastElementChild;	    if(x != null){		p.removeChild(x);	    }	    	    var c = QUEUE.dequeue();	    if(c == null){		//console.log("queue .... NULL");		QUEUE = ORIGINAL_QUEUE.getCopy();		c = QUEUE.dequeue();	    }	    p.appendChild(c);	    	    var c2 = document.createElement("font");	    c2.style.color = "white";	    c2.innerHTML = "■";	    p.appendChild(c2);	    	    p.scrollTo(0, p.scrollHeight);	    VSCODE_PROGRESS--;	    	    if(c.innerHTML != "&nbsp;"){		break;	    }	}    }    catch(e){	DEBUG_LOG(e.message);    }}//----------------------------------------------// Change select tab.//----------------------------------------------function selectTab(idx){    //console.log("selectTab(" + idx + ")");    for(var i=1; i<=5; i++){	var id = "op_" + i;	var p = document.getElementById(id);	if(idx == i){	    if(p!=null) p.style.visibility='visible';	}	else {	    if(p!=null) p.style.visibility='hidden';	}    }}//----------------------------------------------// Get boolean value from string;//----------------------------------------------function string_to_boolean(str, nvl){    if(str == null){	return nvl;    }    if(str == ""){	return nvl;    }    if(str == "true"){	return true;    }    else {	return false;    }}//----------------------------------------------// Get string value from boolean.//----------------------------------------------function boolean_to_string(b){    if(b == true){	return "true";    }    else {	return "false";    }}//----------------------------------------------// Save game settings.//----------------------------------------------function save_settings(){    SETTING.load_from_ui();    SETTING.save_to_storage();    SETTING.reflect_to_ui();    prepareDummyVS();    clearDummyVSArea();}//----------------------------------------------// set default settings.//----------------------------------------------function default_settings(){    SETTING.load_default();    SETTING.save_to_storage();    SETTING.reflect_to_ui();    prepareDummyVS();    clearDummyVSArea();}//----------------------------------------------// nvl//----------------------------------------------function nvl(s, n){    if(s==null){	return n;    }    else if(s==""){	return n;    }    else {	return s;    }}//----------------------------------------------// get hashu value.//----------------------------------------------async function sha256(text){    try{	const uint8  = new TextEncoder().encode(text)	const digest = await crypto.subtle.digest('SHA-256', uint8)	return Array.from(new Uint8Array(digest)).map(v => v.toString(16).padStart(2,'0')).join('').toString();    }    catch(e){	DEBUG_LOG(e.message);	return "no_sha256";    }}//----------------------------------------------// Debug mode on/off//----------------------------------------------function disp_debug(){    if(document.getElementById("debug").checked){	console.log("visible");	document.getElementById("debug_console").style.display='block';    }    else {	console.log("none");	document.getElementById("debug_console").style.display='none';    }}//----------------------------------------------// outpout debug log.//----------------------------------------------function DEBUG_LOG(msg){    if(document.getElementById("debug").checked){	var p =document.getElementById("debug_console");	if(p!=null){	    p.value += msg + "\n";	    p.scrollTo(0, p.scrollHeight);	}    }    console.log(msg);}